#!/usr/bin/env bash

# Create lock file
touch /tmp/sshd-bootstrap.lock

TIMER_START="$(
	date +%s.%N
)"

# Populate the environment source file
env >> /etc/sshd-bootstrap.env

source /etc/sshd-bootstrap.conf

function is_sudo_no_password_all ()
{
	local SUDO="${1}"

	if [[ -z ${SUDO} ]]; then
		return 1
	fi

	if [[ -n $(echo "${SUDO}" \
		| awk -v pattern="NOPASSWD:ALL" '$NF ~ pattern { print $0; }') ]]; then
		return 0
	fi

	return 1
}

function is_valid_ssh_authorized_keys ()
{
	local AUTHORIZED_KEYS="${1:-}"
	local IFS=
	local INVALID_KEY_PATTERN='is not a public key file.$'
	local SSH_KEY=

	if [[ -z ${AUTHORIZED_KEYS} ]]; then
		return 1
	fi

	while read -r SSH_KEY || [[ -n ${SSH_KEY} ]]; do
		if [[ -n ${SSH_KEY} ]] \
			&& [[ $(
				get_ssh_key_fingerprint "${SSH_KEY}"
			) =~ ${INVALID_KEY_PATTERN} ]]; then
			return 1
		fi
	done <<< "${AUTHORIZED_KEYS}"

	return 0
}

function is_valid_ssh_chroot_directory ()
{
	local CHROOT_DIRECTORY="${1:-}"
	local SAFE_DIRECTORY='^(%h|\/(?!\/|bin|dev|etc|lib|lib64|lost+found|media|proc|root|sbin|srv|sys|tmp|usr).+)$'

	if grep -qoP "${SAFE_DIRECTORY}" <<< "${CHROOT_DIRECTORY}"; then
		return 0
	fi

	return 1
}

function is_valid_ssh_user ()
{
	local USERNAME="${1}"
	local SAFE_USERNAME='^[a-z_][a-z0-9_-]{0,29}[$a-z0-9_]?$'

	if [[ ${USERNAME} != root ]] \
		&& [[ ${USERNAME} =~ ${SAFE_USERNAME} ]]; then
		return 0
	fi

	return 1
}

function is_valid_ssh_user_home ()
{
	local HOME_DIRECTORY="${1:-}"
	local SAFE_DIRECTORY='^\/(?!\/|bin|dev|etc|lib|lib64|lost+found|media|proc|root|sbin|srv|sys|tmp|usr).+$'

	if grep -qoP "${SAFE_DIRECTORY}" <<< "${HOME_DIRECTORY}"; then
		return 0
	fi

	return 1
}

function is_valid_ssh_user_password_hash ()
{
	local PASSWORD_HASH="${1:-}"
	local SHA_512_PATTERN='^\$6\$[a-zA-Z0-9./]{0,16}\$[a-zA-Z0-9./]{86}$'

	if [[ -z ${PASSWORD_HASH} ]]; then
		return 1
	fi

	if [[ ${PASSWORD_HASH} =~ ${SHA_512_PATTERN} ]]; then
		return 0
	fi

	return 1
}

function is_valid_ssh_user_shell ()
{
	local SHELL="${1}"
	local VALID_SHELL=
	local VALID_SHELLS="$(
		chsh --list-shells
	)"

	if [[ -z ${SHELL} ]]; then
		return 1
	fi

	for VALID_SHELL in ${VALID_SHELLS}; do
		if [[ ${VALID_SHELL} == "${SHELL}" ]]; then
			return 0
		fi
	done

	return 1
}

function is_valid_ssh_user_id ()
{
	local GROUP_ID=500
	local ID="${1}"
	local ID_PATTERN='^([0-9]{3,}):([0-9]{3,})$'
	local USER_ID=500

	if [[ -z ${ID} ]]; then
		return 1
	fi

	if [[ ${ID} =~ ${ID_PATTERN} ]]; then
		USER_ID="${BASH_REMATCH[1]}"
		GROUP_ID="${BASH_REMATCH[2]}"

		if (( USER_ID >= 500 )) && (( GROUP_ID >= 500 )); then
			return 0
		fi
	fi

	return 1
}

function get_password ()
{
	local PASSWORD_LENGTH="${1:-16}"
	local PASSWORD="$(
		head -n 4096 /dev/urandom \
		| tr -cd '[:alnum:]' \
		| cut -c1-"${PASSWORD_LENGTH}"
	)"

	printf -- "%s" "${PASSWORD}"

	return 0
}

function get_ssh_authorized_keys ()
{
	local DEFAULT_PATH="${1:-/etc/services-config/ssh/authorized_keys}"
	local VALUE="${SSH_AUTHORIZED_KEYS:-}"
	local PATTERN_BASE64='^[A-Za-z0-9/+=]*$'

	if [[ -z ${VALUE} ]] && [[ -s ${DEFAULT_PATH} ]]; then
		VALUE="$(< "${DEFAULT_PATH}")"
	elif [[ -n ${VALUE} ]] \
		&& [[ ${VALUE} =~ ${PATTERN_BASE64} ]]; then
		VALUE="$(
			base64 -d -i <<< "${VALUE}"
		)"
	fi

	printf -- "%s" "${VALUE}"
}

function get_ssh_authorized_key_fingerprints ()
{
	local AUTHORIZED_KEYS="${1:-$(get_ssh_authorized_keys)}"
	local FINGERPRINT=
	local FINGERPRINTS=
	local IFS=
	local INVALID_KEY_PATTERN='is not a public key file.$'
	local INSECURE_FINGERPRINT='dd:3b:b8:2e:85:04:06:e9:ab:ff:a8:0a:c0:04:6e:d6'
	local SSH_KEY=

	if [[ -z ${AUTHORIZED_KEYS} ]]; then
		return 1
	fi

	while read -r SSH_KEY || [[ -n ${SSH_KEY} ]]; do
		if [[ -n ${SSH_KEY} ]] \
			&& [[ ! $(
				get_ssh_key_fingerprint "${SSH_KEY}"
			) =~ ${INVALID_KEY_PATTERN} ]]; then

			printf -v FINGERPRINT \
				-- '%s' \
				"$(
					get_ssh_key_fingerprint "${SSH_KEY}" \
					| awk '{ print $2; }'
				)"

			# Indicate use of insecure public key
			if [[ ${FINGERPRINT} == ${INSECURE_FINGERPRINT} ]];then
				FINGERPRINT+=" (insecure key)"
			fi

			printf -v FINGERPRINTS \
				-- '%s%s\n' \
				"${FINGERPRINTS}" \
				"${FINGERPRINT}"
		fi
	done <<< "${AUTHORIZED_KEYS}"

	printf -- "%s" "${FINGERPRINTS}"
}

function get_ssh_chroot_directory ()
{
	local DEFAULT_VALUE="${1:-%h}"
	local VALUE="${SSH_CHROOT_DIRECTORY:-}"

	if [[ -z ${VALUE} ]] || ! is_valid_ssh_chroot_directory "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	printf -- "%s" "${VALUE}"
}

function get_ssh_chroot_directory_path ()
{
	local CHROOT_DIRECTORY="${1:-$(get_ssh_chroot_directory)}"
	local DEFAULT_CHROOT_DIRECTORY_VALUE="%h"
	local USER="$(
		get_ssh_user
	)"
	local HOME="$(
		get_ssh_user_home
	)"
	local VALUE=

	if ! is_valid_ssh_chroot_directory "${CHROOT_DIRECTORY}"; then
		CHROOT_DIRECTORY="${DEFAULT_CHROOT_DIRECTORY_VALUE}"
	fi

	# Replace %h with SSH_USER_HOME
	VALUE="${CHROOT_DIRECTORY//'%h'/${HOME}}"

	# Replace %u with SSH_USER
	VALUE="${VALUE//'%u'/${USER}}"

	printf -- "%s" "${VALUE}"
}

function get_ssh_host_key_fingerprint ()
{
	local FINGERPRINT=
	local INVALID_KEY_PATTERN='is not a public key file.$'
	local PUBLIC_KEY_PATH
	local SSH_KEY
	local TYPE="${1:-rsa}"

	case "${TYPE}" in
		rsa1|rsa|dsa|ecdsa|ed25519)
			PUBLIC_KEY_PATH=/etc/ssh/ssh_host_${TYPE}_key.pub
			SSH_KEY="$(< "${PUBLIC_KEY_PATH}")"
			FINGERPRINT="$(
				get_ssh_key_fingerprint "${SSH_KEY}"
			)"

			if [[ -s ${PUBLIC_KEY_PATH} ]] \
				&& [[ ! ${FINGERPRINT} =~ ${INVALID_KEY_PATTERN} ]]; then
				printf \
					-- '%s\n' \
					"${FINGERPRINT}" \
				| awk '{ print $2; }'
			else
				printf \
					-- '%s\n' \
					"invalid-key"
			fi
			;;
		*)
			echo "invalid-key-type"
			;;
	esac
}

function get_ssh_key_fingerprint ()
{
	local FINGERPRINT
	local SSH_KEY="${1:-}"
	local SSH_KEY_FILE="$(
		mktemp
	)"

	echo "${SSH_KEY}" > "${SSH_KEY_FILE}"

	FINGERPRINT="$(
		ssh-keygen -lf "${SSH_KEY_FILE}"
	)"

	rm -f "${SSH_KEY_FILE}"

	printf -- "%s" "${FINGERPRINT}"
}

function get_ssh_user ()
{
	local DEFAULT_VALUE="${1:-app-admin}"
	local VALUE="${SSH_USER:-}"

	if [[ -z ${VALUE} ]] || ! is_valid_ssh_user "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	printf -- "%s" "${VALUE}"
}

function get_ssh_user_home ()
{
	local DEFAULT_VALUE="${1:-/home/%u}"
	local USER="$(
		get_ssh_user
	)"
	local VALUE="${SSH_USER_HOME:-}"

	if [[ -z ${VALUE} ]] || ! is_valid_ssh_user_home "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	# Replace %u with SSH_USER
	VALUE="${VALUE//'%u'/${USER}}"

	printf -- "%s" "${VALUE}"
}

function get_ssh_user_shell ()
{
	local DEFAULT_VALUE="${1:-/bin/bash}"
	local VALUE="${SSH_USER_SHELL:-}"
	local FORCE_SFTP="${SSH_USER_FORCE_SFTP:-false}"

	if [[ -z ${VALUE} ]] || ! is_valid_ssh_user_shell "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	# SFTP users cannot have shell access
	if [[ ${FORCE_SFTP} == true ]]; then
		VALUE=/sbin/nologin
	fi

	printf -- "%s" "${VALUE}"
}

function get_ssh_user_uid ()
{
	local DEFAULT_VALUE="${1:-500}"
	local ID="$(
		get_ssh_user_id
	)"
	local ID_PATTERN='^([0-9]{3,}):([0-9]{3,})$'
	local VALUE="${DEFAULT_VALUE}"

	if [[ ${ID} =~ ${ID_PATTERN} ]]; then
		VALUE="${BASH_REMATCH[1]}"
	fi

	printf "%d" "${VALUE}"
}

function get_ssh_user_id ()
{
	local DEFAULT_VALUE="${1:-500:500}"
	local VALUE="${SSH_USER_ID:-}"

	if [[ -z ${VALUE} ]] || ! is_valid_ssh_user_id "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	printf -- "%s" "${VALUE}"
}

function get_ssh_user_gid ()
{
	local DEFAULT_VALUE="${1:-500}"
	local ID="$(
		get_ssh_user_id
	)"
	local ID_PATTERN='^([0-9]{3,}):([0-9]{3,})$'
	local VALUE="${DEFAULT_VALUE}"

	if [[ ${ID} =~ ${ID_PATTERN} ]]; then
		VALUE="${BASH_REMATCH[2]}"
	fi

	printf -- "%d" "${VALUE}"
}

function generate_ssh_host_key ()
{
	local PRIVATE_KEY_PATH
	local PUBLIC_KEY_PATH
	local REPLACE="${1:-false}"
	local RESPONSE='n\n'
	local TYPE="${2:-rsa}"

	if [[ ${REPLACE} == true ]] || [[ ${REPLACE} == 'y' ]]; then
		RESPONSE='y\n'
	fi

	case "${TYPE}" in
		rsa1|rsa|dsa|ecdsa|ed25519)
			if [[ ${TYPE} != rsa1 ]]; then
				PRIVATE_KEY_PATH=/etc/ssh/ssh_host_${TYPE}_key
				PUBLIC_KEY_PATH=/etc/ssh/ssh_host_${TYPE}_key.pub
			else
				PRIVATE_KEY_PATH=/etc/ssh/ssh_host_key
				PUBLIC_KEY_PATH=/etc/ssh/ssh_host_key.pub
			fi

			echo -e "${RESPONSE}" \
			| ssh-keygen \
				-q \
				-C "" \
				-N "" \
				-t "${TYPE}" \
				-f "${PRIVATE_KEY_PATH}" \
				&> /dev/null

			if [[ -x /sbin/restorecon ]]; then
				/sbin/restorecon "${PUBLIC_KEY_PATH}"
			fi

			;;
		*)
			echo "Unknown key type ${TYPE} - skipping."
			;;
	esac
}

function generate_ssh_host_keys ()
{
	local REPLACE="${1:-false}"
	local VERSION="${2:-}"

	if [[ -z ${VERSION} ]] && [[ -e /etc/redhat-release ]]; then
		VERSION="$(
			rpm -q \
				--whatprovides redhat-release \
				--queryformat "%{VERSION}"
		)"
	else
		echo "ERROR: Unknown EL release."
		return 1
	fi

	case "${VERSION}" in
		6)
			generate_ssh_host_key "${REPLACE}" rsa1
			generate_ssh_host_key "${REPLACE}" rsa
			generate_ssh_host_key "${REPLACE}" dsa
			;;
		7)
			generate_ssh_host_key "${REPLACE}" rsa1
			generate_ssh_host_key "${REPLACE}" rsa
			generate_ssh_host_key "${REPLACE}" dsa
			generate_ssh_host_key "${REPLACE}" ecdsa
			generate_ssh_host_key "${REPLACE}" ed25519
			;;
		*)
			echo "Unknown EL release ${VERSION} - skipping."
			;;
	esac
}

OPTS_SSH_INHERIT_ENVIRONMENT="${SSH_INHERIT_ENVIRONMENT:-false}"
OPTS_SSH_USER="$(
	get_ssh_user app-admin
)"
OPTS_SSH_USER_HOME="$(
	get_ssh_user_home
)"

# Docker ENV inheritance
if [[ ${OPTS_SSH_INHERIT_ENVIRONMENT} == true ]] \
	&& [[ -s /etc/sshd-bootstrap.env ]]; then
	# Variables to exclude
	grep -Ev "^([.]*SSH_USER_PASSWORD|_|HOME|HOSTNAME|PATH|PWD|SHLVL|SUPERVISOR_ENABLED|SUPERVISOR_GROUP_NAME|SUPERVISOR_PROCESS_NAME|TERM)=" \
		/etc/sshd-bootstrap.env > /etc/environment
fi

if [[ ! -d ${OPTS_SSH_USER_HOME}/.ssh ]]; then

	declare -A ENV_VALIDATION_WITH_DEFAULTS=(
		[SSH_CHROOT_DIRECTORY]=is_valid_ssh_chroot_directory
		[SSH_USER]=is_valid_ssh_user
		[SSH_USER_HOME]=is_valid_ssh_user_home
		[SSH_USER_ID]=is_valid_ssh_user_id
		[SSH_USER_SHELL]=is_valid_ssh_user_shell
	)
	DEFAULT_SSH_SUDO="ALL=(ALL) ALL"
	PASSWORD_LENGTH=16
	REDACTED_VALUE="********"
	OPTS_SSH_AUTHORIZED_KEYS="$(
		get_ssh_authorized_keys \
			/etc/services-config/ssh/authorized_keys
	)"
	OPTS_SSH_SUDO="${SSH_SUDO:-${DEFAULT_SSH_SUDO}}"
	OPTS_SSH_USER_PASSWORD_HASHED="${SSH_USER_PASSWORD_HASHED:-false}"
	OPTS_SSH_USER_PASSWORD="${SSH_USER_PASSWORD:-$(get_password ${PASSWORD_LENGTH})}"
	OPTS_SSH_USER_FORCE_SFTP="${SSH_USER_FORCE_SFTP:-false}"
	OPTS_SSH_USER_SHELL="$(
		get_ssh_user_shell /bin/bash
	)"
	OPTS_SSH_USER_UID="$(
		get_ssh_user_uid
	)"
	OPTS_SSH_USER_GID="$(
		get_ssh_user_gid
	)"

	if [[ ${OPTS_SSH_USER_FORCE_SFTP} == true ]]; then
		SSHD_COMMAND=SFTP
		SSH_USER_GROUPS=users
		OPTS_SSH_CHROOT_DIRECTORY="$(
			get_ssh_chroot_directory %h
		)"
	else
		SSHD_COMMAND=SSH
	fi

	# Initialise
	echo "Initialising ${SSHD_COMMAND}."

	# Warn operator if any supplied environment variable values failed validation 
	# and have been set to a safe default.
	for ENV in "${!ENV_VALIDATION_WITH_DEFAULTS[@]}"; do
		if ! ${ENV_VALIDATION_WITH_DEFAULTS[${ENV}]} "${!ENV}"; then
			printf -- \
				"WARNING: ENV %s failed validation - setting to default.\n" \
				"${ENV}"
		fi
	done

	# Fix symbolic links from services-config
	if [[ -s /etc/services-config/ssh/sshd_config ]] \
		&& [[ ! -L /etc/ssh/sshd_config ]]; then
		ln -sf \
			/etc/services-config/ssh/sshd_config \
			/etc/ssh/sshd_config
	fi

	$(
		# Generate new host keys
		generate_ssh_host_keys
	) &
	PIDS[0]=${!}

	# Create base directory for home
	if [[ -n ${OPTS_SSH_USER_HOME%/*} ]] \
		&& [[ ! -d ${OPTS_SSH_USER_HOME%/*} ]]; then
		echo "Creating home base directory."
		mkdir -pm 755 "${OPTS_SSH_USER_HOME%/*}"
	fi

	groupadd \
		-f \
		-g "${OPTS_SSH_USER_GID}" \
		"${OPTS_SSH_USER}"

	useradd \
		-u "${OPTS_SSH_USER_UID}" \
		-g "${OPTS_SSH_USER_GID}" \
		-m \
		-G "${SSH_USER_GROUPS:-users,wheel}" \
		-d "${OPTS_SSH_USER_HOME}" \
		-s "${OPTS_SSH_USER_SHELL}" \
		"${OPTS_SSH_USER}"

	$(
		# Set root user password
		echo "root:${SSH_ROOT_PASSWORD:-$(get_password ${PASSWORD_LENGTH})}" \
		| chpasswd
	) &
	PIDS[1]=${!}

	# Set SSH user password
	if [[ ${OPTS_SSH_USER_PASSWORD_HASHED} == true ]] \
		&& [[ -n ${SSH_USER_PASSWORD} ]]; then
		# Hashed password must use SHA-512 hashing algorithm
		if ! is_valid_ssh_user_password_hash "${SSH_USER_PASSWORD}"; then
			echo "ERROR: Password hash not SHA-512 - setting new password."

			SSH_USER_PASSWORD=
			OPTS_SSH_USER_PASSWORD=$(get_password ${PASSWORD_LENGTH})
			echo "${OPTS_SSH_USER}:${OPTS_SSH_USER_PASSWORD}" | chpasswd
		else
			echo "${OPTS_SSH_USER}:${SSH_USER_PASSWORD}" | chpasswd -e
		fi
	else
		echo "${OPTS_SSH_USER}:${OPTS_SSH_USER_PASSWORD}" | chpasswd
	fi

	# SFTP users
	if [[ ${OPTS_SSH_USER_FORCE_SFTP} == true ]]; then
		SSHD_COMMAND=SFTP

		# Get the ChrootDirectory path.
		# %h and %u are replaced with the User's HOME and USERNAME respectively.
		SSH_CHROOT_DIRECTORY_PATH="$(
			get_ssh_chroot_directory_path "${OPTS_SSH_CHROOT_DIRECTORY}"
		)"

		if [[ ! -d ${SSH_CHROOT_DIRECTORY_PATH} ]] \
			|| [[ ${SSH_CHROOT_DIRECTORY_PATH} != "${OPTS_SSH_USER_HOME}" ]]; then
			# ChrootDirectory like /chroot/%u or /home/chroot/%u
			printf -v SSH_CHROOT_HOME_DIRECTORY_PATH \
				-- '%s%s' \
				"${SSH_CHROOT_DIRECTORY_PATH}" \
				"${OPTS_SSH_USER_HOME}"

			mkdir -pm 711 "${SSH_CHROOT_DIRECTORY_PATH}"
			mkdir -pm 755 "${SSH_CHROOT_HOME_DIRECTORY_PATH}"
		else
			# ChrootDirectory %h
			SSH_CHROOT_HOME_DIRECTORY_PATH="${OPTS_SSH_USER_HOME}"

			chmod 750 "${OPTS_SSH_USER_HOME}"
		fi

		# Create a user writeable data directory if no other directories are mounted.
		if ! grep -q '^d' <<< "$(ls -l "${SSH_CHROOT_HOME_DIRECTORY_PATH}"/)"; then
			# Make and set user permissions on new _data directory
			mkdir -m 700 \
				"${SSH_CHROOT_HOME_DIRECTORY_PATH}"/_data
			chown -R \
				"${OPTS_SSH_USER}":"${OPTS_SSH_USER}" \
				"${SSH_CHROOT_HOME_DIRECTORY_PATH}"/_data
		elif [[ -d ${SSH_CHROOT_HOME_DIRECTORY_PATH}/_data ]]; then
			# Set user permissions on _data directory in case where it exists
			chmod 700 \
				"${SSH_CHROOT_HOME_DIRECTORY_PATH}"/_data
			chown -R \
				"${OPTS_SSH_USER}":"${OPTS_SSH_USER}" \
				"${SSH_CHROOT_HOME_DIRECTORY_PATH}"/_data
		fi

		if [[ ${SSH_CHROOT_DIRECTORY_PATH} != "${OPTS_SSH_USER_HOME}" ]]; then
			# ChrootDirectory must be owned by root user
			chown \
				root:root \
				"${SSH_CHROOT_DIRECTORY_PATH}"
			chmod 711 \
				"${SSH_CHROOT_DIRECTORY_PATH}"
		else
			# ChrootDirectory must be owned by root user
			chown root:"${OPTS_SSH_USER}" \
				"${SSH_CHROOT_DIRECTORY_PATH}"
		fi

		# Add group specific sshd configuration
		tee -a /etc/services-config/ssh/sshd_config > /dev/null <<-EOT
			# Force SFTP
			Match group ${SSH_USER_GROUPS}
			AllowTcpForwarding no
			X11Forwarding no
			ChrootDirectory ${OPTS_SSH_CHROOT_DIRECTORY}
			ForceCommand internal-sftp
		EOT
	else
		sed -i \
			-e '/# Force SFTP/,/ForceCommand internal-sftp/ { d; }' \
			/etc/services-config/ssh/sshd_config
	fi

	# SSH require files
	mkdir -m 700 \
		"${OPTS_SSH_USER_HOME}"/.ssh
	touch \
		"${OPTS_SSH_USER_HOME}"/.ssh/authorized_keys
	chown -R \
		"${OPTS_SSH_USER}":"${OPTS_SSH_USER}" \
		"${OPTS_SSH_USER_HOME}"/.ssh
	chmod 600 \
		"${OPTS_SSH_USER_HOME}"/.ssh/authorized_keys

	if ! is_valid_ssh_authorized_keys "${OPTS_SSH_AUTHORIZED_KEYS}"; then
		printf -v SSH_KEY_FINGERPRINTS \
			-- '%s\nUnable to populate %s/.ssh/authorized_key'
			"ERROR: Public key validation failed." \
			"${OPTS_SSH_USER_HOME}"
	else
		printf \
			-- '%s' \
			"${OPTS_SSH_AUTHORIZED_KEYS}" \
			> "${OPTS_SSH_USER_HOME}"/.ssh/authorized_keys

		SSH_KEY_FINGERPRINTS="$(
			get_ssh_authorized_key_fingerprints
		)"
	fi

	# Set sudo access for the wheel group only
	if [[ ${DEFAULT_SSH_SUDO} != "${OPTS_SSH_SUDO}" ]]; then
		sed -i \
			-e "s~^%wheel\\t.*$~%wheel\\t${OPTS_SSH_SUDO}~g" \
			/etc/sudoers
	fi

	tee -a /etc/sudoers > /dev/null <<-EOT

		# ${OPTS_SSH_USER}
		Defaults:root secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
	EOT

	# Wait for background processes
	wait ${PIDS[0]} && SSH_HOST_KEY_FINGERPRINT_RSA="$(
		get_ssh_host_key_fingerprint rsa
	)"
	wait ${PIDS[1]}

	# Never store the root password
	SSH_ROOT_PASSWORD="${REDACTED_VALUE}"

	# Only show user password if auto-generated and password is required for sudo
	if [[ -n ${SSH_USER_PASSWORD} ]] \
		|| is_sudo_no_password_all "${OPTS_SSH_SUDO}" \
		|| [[ ${OPTS_SSH_USER_FORCE_SFTP} == true ]]; then
		OPTS_SSH_USER_PASSWORD="${REDACTED_VALUE}"
		SSH_USER_PASSWORD="${REDACTED_VALUE}"
	fi

	if [[ ${OPTS_SSH_USER_FORCE_SFTP} == true ]]; then
		unset OPTS_SSH_SUDO
	fi

	TIMER_TOTAL="$(
		echo - | awk "\
		{ T1=\"${TIMER_START}\" } \
		{ T2=\"$(date +%s.%N)\" } \
		{ print T2 - T1; }"
	)"

	cat <<-EOT

		================================================================================
		${SSHD_COMMAND} Details
		--------------------------------------------------------------------------------
		user : ${OPTS_SSH_USER}
		password : ${OPTS_SSH_USER_PASSWORD}
		id : ${OPTS_SSH_USER_UID}:${OPTS_SSH_USER_GID}
		home : ${OPTS_SSH_USER_HOME}
		chroot path : ${SSH_CHROOT_DIRECTORY_PATH:-N/A}
		shell : ${OPTS_SSH_USER_SHELL}
		sudo : ${OPTS_SSH_SUDO:-N/A}
		key fingerprints :
		${SSH_KEY_FINGERPRINTS}
		rsa host key fingerprint :
		${SSH_HOST_KEY_FINGERPRINT_RSA}
		--------------------------------------------------------------------------------
		${TIMER_TOTAL}

	EOT
fi

# Release lock file
rm -f /tmp/sshd-bootstrap.lock

exit 0
